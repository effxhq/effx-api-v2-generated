/*
 * effx API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContactInformation struct for ContactInformation
type ContactInformation struct {
	Email *string `json:"email,omitempty"`
	OnCall *Link `json:"onCall,omitempty"`
	Chat *Link `json:"chat,omitempty"`
	IssueTracker *Link `json:"issueTracker,omitempty"`
}

// NewContactInformation instantiates a new ContactInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactInformation() *ContactInformation {
	this := ContactInformation{}
	return &this
}

// NewContactInformationWithDefaults instantiates a new ContactInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactInformationWithDefaults() *ContactInformation {
	this := ContactInformation{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ContactInformation) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ContactInformation) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ContactInformation) SetEmail(v string) {
	o.Email = &v
}

// GetOnCall returns the OnCall field value if set, zero value otherwise.
func (o *ContactInformation) GetOnCall() Link {
	if o == nil || o.OnCall == nil {
		var ret Link
		return ret
	}
	return *o.OnCall
}

// GetOnCallOk returns a tuple with the OnCall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetOnCallOk() (*Link, bool) {
	if o == nil || o.OnCall == nil {
		return nil, false
	}
	return o.OnCall, true
}

// HasOnCall returns a boolean if a field has been set.
func (o *ContactInformation) HasOnCall() bool {
	if o != nil && o.OnCall != nil {
		return true
	}

	return false
}

// SetOnCall gets a reference to the given Link and assigns it to the OnCall field.
func (o *ContactInformation) SetOnCall(v Link) {
	o.OnCall = &v
}

// GetChat returns the Chat field value if set, zero value otherwise.
func (o *ContactInformation) GetChat() Link {
	if o == nil || o.Chat == nil {
		var ret Link
		return ret
	}
	return *o.Chat
}

// GetChatOk returns a tuple with the Chat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetChatOk() (*Link, bool) {
	if o == nil || o.Chat == nil {
		return nil, false
	}
	return o.Chat, true
}

// HasChat returns a boolean if a field has been set.
func (o *ContactInformation) HasChat() bool {
	if o != nil && o.Chat != nil {
		return true
	}

	return false
}

// SetChat gets a reference to the given Link and assigns it to the Chat field.
func (o *ContactInformation) SetChat(v Link) {
	o.Chat = &v
}

// GetIssueTracker returns the IssueTracker field value if set, zero value otherwise.
func (o *ContactInformation) GetIssueTracker() Link {
	if o == nil || o.IssueTracker == nil {
		var ret Link
		return ret
	}
	return *o.IssueTracker
}

// GetIssueTrackerOk returns a tuple with the IssueTracker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContactInformation) GetIssueTrackerOk() (*Link, bool) {
	if o == nil || o.IssueTracker == nil {
		return nil, false
	}
	return o.IssueTracker, true
}

// HasIssueTracker returns a boolean if a field has been set.
func (o *ContactInformation) HasIssueTracker() bool {
	if o != nil && o.IssueTracker != nil {
		return true
	}

	return false
}

// SetIssueTracker gets a reference to the given Link and assigns it to the IssueTracker field.
func (o *ContactInformation) SetIssueTracker(v Link) {
	o.IssueTracker = &v
}

func (o ContactInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.OnCall != nil {
		toSerialize["onCall"] = o.OnCall
	}
	if o.Chat != nil {
		toSerialize["chat"] = o.Chat
	}
	if o.IssueTracker != nil {
		toSerialize["issueTracker"] = o.IssueTracker
	}
	return json.Marshal(toSerialize)
}

type NullableContactInformation struct {
	value *ContactInformation
	isSet bool
}

func (v NullableContactInformation) Get() *ContactInformation {
	return v.value
}

func (v *NullableContactInformation) Set(val *ContactInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableContactInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableContactInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactInformation(val *ContactInformation) *NullableContactInformation {
	return &NullableContactInformation{value: val, isSet: true}
}

func (v NullableContactInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


