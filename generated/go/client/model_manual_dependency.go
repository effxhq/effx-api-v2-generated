/*
 * effx API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ManualDependency An explicit dependency on another entity
type ManualDependency struct {
	// The kind of entity to depend on. Defaults to 'service'
	Kind *string `json:"kind,omitempty"`
	// Matches a dependency by the kind's name
	Name *string `json:"name,omitempty"`
}

// NewManualDependency instantiates a new ManualDependency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualDependency() *ManualDependency {
	this := ManualDependency{}
	var kind string = "service"
	this.Kind = &kind
	return &this
}

// NewManualDependencyWithDefaults instantiates a new ManualDependency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualDependencyWithDefaults() *ManualDependency {
	this := ManualDependency{}
	var kind string = "service"
	this.Kind = &kind
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ManualDependency) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualDependency) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ManualDependency) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ManualDependency) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ManualDependency) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualDependency) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ManualDependency) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ManualDependency) SetName(v string) {
	o.Name = &v
}

func (o ManualDependency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableManualDependency struct {
	value *ManualDependency
	isSet bool
}

func (v NullableManualDependency) Get() *ManualDependency {
	return v.value
}

func (v *NullableManualDependency) Set(val *ManualDependency) {
	v.value = val
	v.isSet = true
}

func (v NullableManualDependency) IsSet() bool {
	return v.isSet
}

func (v *NullableManualDependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualDependency(val *ManualDependency) *NullableManualDependency {
	return &NullableManualDependency{value: val, isSet: true}
}

func (v NullableManualDependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualDependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


