/*
 * effx API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ServicesApiController binds http requests to an api service and writes the service results to the http response
type ServicesApiController struct {
	service ServicesApiServicer
}

// NewServicesApiController creates a default api controller
func NewServicesApiController(s ServicesApiServicer) Router {
	return &ServicesApiController{ service: s }
}

// Routes returns all of the api route for the ServicesApiController
func (c *ServicesApiController) Routes() Routes {
	return Routes{ 
		{
			"DetectedServicesPut",
			strings.ToUpper("Put"),
			"/v2/detected_services",
			c.DetectedServicesPut,
		},
		{
			"GetServiceById",
			strings.ToUpper("Get"),
			"/v2/services/{serviceId}",
			c.GetServiceById,
		},
		{
			"ServicesGet",
			strings.ToUpper("Get"),
			"/v2/services",
			c.ServicesGet,
		},
		{
			"ServicesPut",
			strings.ToUpper("Put"),
			"/v2/services",
			c.ServicesPut,
		},
	}
}

// DetectedServicesPut - 
func (c *ServicesApiController) DetectedServicesPut(w http.ResponseWriter, r *http.Request) { 
	xEffxApiKey := r.Header.Get("X-Effx-Api-Key")
	detectedServicesPayload := &DetectedServicesPayload{}
	if err := json.NewDecoder(r.Body).Decode(&detectedServicesPayload); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.DetectedServicesPut(r.Context(), xEffxApiKey, *detectedServicesPayload)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetServiceById - Info for a specific service
func (c *ServicesApiController) GetServiceById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	xEffxApiKey := r.Header.Get("X-Effx-Api-Key")
	serviceId := params["serviceId"]
	result, err := c.service.GetServiceById(r.Context(), xEffxApiKey, serviceId)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ServicesGet - 
func (c *ServicesApiController) ServicesGet(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	xEffxApiKey := r.Header.Get("X-Effx-Api-Key")
	limit, err := parseInt32Parameter(query.Get("limit"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	offset, err := parseInt32Parameter(query.Get("offset"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.ServicesGet(r.Context(), xEffxApiKey, limit, offset)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// ServicesPut - 
func (c *ServicesApiController) ServicesPut(w http.ResponseWriter, r *http.Request) { 
	xEffxApiKey := r.Header.Get("X-Effx-Api-Key")
	serviceConfiguration := &ServiceConfiguration{}
	if err := json.NewDecoder(r.Body).Decode(&serviceConfiguration); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.ServicesPut(r.Context(), xEffxApiKey, *serviceConfiguration)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
