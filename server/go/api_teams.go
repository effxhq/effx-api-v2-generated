/*
 * effx API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A TeamsApiController binds http requests to an api service and writes the service results to the http response
type TeamsApiController struct {
	service TeamsApiServicer
}

// NewTeamsApiController creates a default api controller
func NewTeamsApiController(s TeamsApiServicer) Router {
	return &TeamsApiController{ service: s }
}

// Routes returns all of the api route for the TeamsApiController
func (c *TeamsApiController) Routes() Routes {
	return Routes{ 
		{
			"GetTeamById",
			strings.ToUpper("Get"),
			"/v2/teams/{teamId}",
			c.GetTeamById,
		},
		{
			"TeamsGet",
			strings.ToUpper("Get"),
			"/v2/teams",
			c.TeamsGet,
		},
		{
			"TeamsPut",
			strings.ToUpper("Put"),
			"/v2/teams",
			c.TeamsPut,
		},
	}
}

// GetTeamById - Info for a specific team
func (c *TeamsApiController) GetTeamById(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	xEffxApiKey := r.Header.Get("X-Effx-Api-Key")
	teamId := params["teamId"]
	result, err := c.service.GetTeamById(r.Context(), xEffxApiKey, teamId)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// TeamsGet - 
func (c *TeamsApiController) TeamsGet(w http.ResponseWriter, r *http.Request) { 
	query := r.URL.Query()
	xEffxApiKey := r.Header.Get("X-Effx-Api-Key")
	limit, err := parseInt32Parameter(query.Get("limit"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	offset, err := parseInt32Parameter(query.Get("offset"))
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.TeamsGet(r.Context(), xEffxApiKey, limit, offset)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// TeamsPut - 
func (c *TeamsApiController) TeamsPut(w http.ResponseWriter, r *http.Request) { 
	xEffxApiKey := r.Header.Get("X-Effx-Api-Key")
	teamConfiguration := &TeamConfiguration{}
	if err := json.NewDecoder(r.Body).Decode(&teamConfiguration); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.TeamsPut(r.Context(), xEffxApiKey, *teamConfiguration)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
