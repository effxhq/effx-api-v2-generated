/*
 * effx API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Dependencies Declare dependencies on other services
type Dependencies struct {
	Manual *[]ManualDependency `json:"manual,omitempty"`
}

// NewDependencies instantiates a new Dependencies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDependencies() *Dependencies {
	this := Dependencies{}
	return &this
}

// NewDependenciesWithDefaults instantiates a new Dependencies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDependenciesWithDefaults() *Dependencies {
	this := Dependencies{}
	return &this
}

// GetManual returns the Manual field value if set, zero value otherwise.
func (o *Dependencies) GetManual() []ManualDependency {
	if o == nil || o.Manual == nil {
		var ret []ManualDependency
		return ret
	}
	return *o.Manual
}

// GetManualOk returns a tuple with the Manual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dependencies) GetManualOk() (*[]ManualDependency, bool) {
	if o == nil || o.Manual == nil {
		return nil, false
	}
	return o.Manual, true
}

// HasManual returns a boolean if a field has been set.
func (o *Dependencies) HasManual() bool {
	if o != nil && o.Manual != nil {
		return true
	}

	return false
}

// SetManual gets a reference to the given []ManualDependency and assigns it to the Manual field.
func (o *Dependencies) SetManual(v []ManualDependency) {
	o.Manual = &v
}

func (o Dependencies) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Manual != nil {
		toSerialize["manual"] = o.Manual
	}
	return json.Marshal(toSerialize)
}

type NullableDependencies struct {
	value *Dependencies
	isSet bool
}

func (v NullableDependencies) Get() *Dependencies {
	return v.value
}

func (v *NullableDependencies) Set(val *Dependencies) {
	v.value = val
	v.isSet = true
}

func (v NullableDependencies) IsSet() bool {
	return v.isSet
}

func (v *NullableDependencies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDependencies(val *Dependencies) *NullableDependencies {
	return &NullableDependencies{value: val, isSet: true}
}

func (v NullableDependencies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDependencies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


